https://webcoding.tistory.com/entry/Docker-%EB%8F%84%EC%BB%A4-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88


도커 이미지를 start하면 그 이미지의 컨테이너가 running 한다.
그렇기 때문에 하나의 이미지에서 여려개의 컨테이너를 실행시킬 수 있다.

정리하면 이미지는 컨테이너를 만드는 데 사용되는 파일 시스템 및 구성 응용 프로그램
컨테이너는 Dokcer 이미지의 인스턴스를 실행 중이고, 컨테이너는 실제 응용 프로그램을 실행한다.

dockerfile ->    docker image -> docker container
	(build)		(run)

1)search 명령으로 이미지 검색하기

Docker 이미지는 모두 Docker Hub에서 구함

ex)docker search ubuntu



2)pull 명령으로 이미지 받기
형식 docker pull <이미지 이름>:<태그>

ex) docker pull ubuntu:latest

latest를 설정하면 최신 버전을 받는다.


3)images 명령으로 이미지 목록 출력하기
2)를 통해서 받은 이미지의 목록을 출력함

docker images 명령으로 모든 이미지 출력한다.
docker images ubuntu처럼 이미지 이름을 설정하면
이름은 같지만 태그가 다른 이미지가 출력된다.





4)run 명령으로 컨테이너 생성하기 
docker run <옵션> <이미지 이름> <실행할 파일>
ex) docker run -i -t --name tiger ubuntu /bin/bash

i(interactive), -t(Pseudo-tty) 옵션을 사용하면 실행된 Bash 셸에 입력 및 출력을 할 수 있습니다.
--name 옵션으로 컨테이너의 이름을 지정할 수 있습니다. 이름을 지정하지 않으면 Docker가 자동으로 이름을 생성하여 지정합니다.

호스트 OS와 완전히 격리된 공간이 생성되었음을 확인,
mkdir tiger 로 폴더 하나 만들어보고, ls로 리스트 확인해보기! 
그리고 exit를 입력하여 bash셸에서 빠져나오기. 우분투 이미지에서 /bin/bash 실행 파일을 직접 실행했기 떄문에
여기서 빠져나오면 컨테이너가 정지된다.




5) ps 명령으로 컨테이너 목록 확인하기
docker ps
docker ps -a 옵션을 사용하면 정지된 컨테이너까지 모두출력,  4)에서 빠져나올떄 정지한것까지 출력



6) start 명령으로 컨테이너 시작하기
docker start <컨테이너 이름>로 컨테이너 시작하기
docker start tiger 로 컨테이너 시작하고
docker ps로 확인하기

docker restart tiger로 재시작 가능


7) attach 명령으로 컨테이너에 접속하기 **
시작한 컨테이너에 접속하기. 
docker attach tiger

Bash 셸에서 exit를 입력하면 컨테이너가 정지하지만, 여기서 컨트롤 P, 컨트롤 Q를 차례대로 입력하면 컨테이너를
정지하지 않고, 컨테이너에서 빠져나옴


8)exac 명령으로 외부에서 컨테이너 안의 명령 실행하기
현재 컨테이너가 /bin/bash로 실행된 상태. 이번에는 /bin/bash를 통하지 않고 외부에서 컨테이너 안의 명령을 실행

docker exec <컨테이너 이름> <명령> <매개 변수> 형식임
ex) docker exec tiger echo "Hello world"
여기서 echo는 문자열을 컴퓨터 터미널에 출력하는 명령어 **
docker exec 명령은 이미 실행된 컨테이너에 apt-get, yum 명령으로 패키지를 설치하거나, 각종 파일을 실행할 때 활용 가능



9) stop 명령으로 컨테이너 정지하기
docker stop <컨테이너 이름>   -> docker stop tiger로 정지시킴

docker ps 로 확인 가능


10) rm 명령으로 컨테이너 삭제하기

docker rm <컨테이너 이름> -> docker rm tiger 로 삭제
docker ps -a로 확인 가능 


11) rmi 명령으로 이미지 삭제하기
docker rmi <이미지 이름>:<태그>  -> docker rmi ubuntu:latest
태그를 지정하지 않으면 ubuntu라는 이름을 가진 모든 이미지가 삭제된다. (주의)

도커 이미지 삭제 에러(컨테이너 실행 유무와 상관없이 삭제할 이미지가 참조중이면 발생)
=> https://nirsa.tistory.com/61(conflict 에러)


12)컨테이너를 생성하기 위해서는 local에 이미지가 있어햐 한다.
즉) 

docker pull ubunutu:latest로 이미지를 받아오고
docker run -i -t --name hello ubuntu /bin/bash 생성한다
즉 pull 명령어로 이미지를 받아오고 run 명령으로 컨테이너를 생성한다.

 

13) DockerFile 작성하기
Dockerfile은 Docker 이미지 설정 파일입니다. Dockerfile에 설정된 내용대로 이미지를 생성한다.

mkdir example 
cd example (위치는 무관한듯?)

example 폴더에 들어가서 DockerFile 작성하기    추가로 https://dico.me/server/articles/259

https://github.com/pyrasis/dockerbook/blob/master/Chapter04/Dockerfile

자세한 내용은 http://pyrasis.com/book/DockerForTheReallyImpatient/Chapter04/02 에서 확인하기

14) build 명령으로 이미지 생성하기
DockerFile이 저장된 example 디렉토리에서 build 명령을 실행한다.

docker build <옵션> <Dockerfile 경로> 형식. --tag 옵션으로 이미지 이름과 태그를 설정할 수 있다.

ex) docker build --tag hello:0.1 .


생성된 이미지 목록을 확인하기 위해서 docker images를 사용하여 hello:0.1 이미지가 생성되었음을 확인한다.
생성된 이미지를 실행한다.

docker run --name hello-nginx -d -p 80:80 -v /root/data:/data hello:0.1

 -d 옵션은 컨테이너를 백그라운드로 실행합니다.
 -p 80:80 옵션으로 호스트의 80번 포트와 컨테이너의 80번 포트를 연결하고 외부에 노출합니다. 이렇게 설정한 뒤 http://<호스트 IP>:80에 접속하면 컨테이너의 80번 포트로 접속됩니다.
 -v /root/data:/data 옵션으로 호스트의 /root/data 디렉터리를 컨테이너의 /data 디렉터리에 연결합니다. /root/data 디렉터리에 파일을 넣으면 컨테이너에서 해당 파일을 읽을 수 있습니다.


실행된 컨테이너 목록을 확인한다.

docker ps
hello-nginx라는 이름의 컨테이너가 실행되었습니다.

웹브라우저를 실행하고, http://<호스트 ip>:80으로 접속하면 Welcome to nginx! 페이지가 뜬다

호스트 ip는 
docker-machine ip default로 확인 할 수 있다.







---------------------------------------------------------------

도커 컨테이너로 열꺼면 이게 필요하다
192.168.99.100
doc

docker build -t survey .

docker run -it -p 3000:3002 --rm survey






--------------------------------------------------------------------

docker-compose up --build



docker ps -a

docker rm <이름>

docker images 

docker rmi <이미지>




-d 는 백그라운드 실행 

-------------------------------.

docker-compose up --build

					클라이언트
docker run -it -p 80:3000 --rm <이미지>

					서버
docker run -d -it -p 5000:5000 --rm <이미지>




-----------------------------------

http://pyrasis.com/book/DockerForTheReallyImpatient/Chapter08/01/03

개발자 pc에서 dockerfile 작성하기





EXPOSE
http://pyrasis.com/book/DockerForTheReallyImpatient/Chapter07/07



ADD
http://pyrasis.com/book/DockerForTheReallyImpatient/Chapter07/09



COPY
http://pyrasis.com/book/DockerForTheReallyImpatient/Chapter07/10





VOLUME
http://pyrasis.com/book/DockerForTheReallyImpatient/Chapter07/11




WORKDIR
http://pyrasis.com/book/DockerForTheReallyImpatient/Chapter07/13


명령어!
https://nirsa.tistory.com/80


도커 link db할떄 필요할듯?
https://hoony-gunputer.tistory.com/entry/docker-compose-yaml-%ED%8C%8C%EC%9D%BC-%EC%9E%91%EC%84%B1

서버 ATTACK로 들어가보기




https://galid1.tistory.com/324


도커 이미지 이름변경하는 법 

docker tag <레포지토리>:<태그> <바꿀 레포지토리>:<태그>

단 도커허브에 올리기위해서는  <유저아이디/레파지토리이름>:<태그> 로 해야함
					태그로 구분지어야함. ex)server, client



https://stackoverflow.com/questions/29956500/docker-public-registry-push-fails-repository-does-not-exist/37036348


도커 한번 해봐


https://knight76.tistory.com/entry/docker-docker-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EC%82%AD%EC%A0%9C





https://techexpert.tips/ko/%EB%8F%84%EC%BB%A4-%EA%B2%83/docker-%EC%9E%90%EC%8B%9D%EC%9C%BC%EB%A1%9C-%EC%9D%B4%EB%AF%B8%EC%A7%80%EB%A5%BC-%EC%82%AD%EC%A0%9C%ED%95%A0-%EC%88%98-%EC%97%86%EC%9D%8C/




docker pull

docker pull enddl0121/docker-plate:1st 


https://hub.docker.com/repository/docker/enddl0121/docker-plate/tags?page=1









-----------------------------------------------------------------------------------------------------------------...


http://blog.naver.com/PostView.nhn?blogId=alice_k106&logNo=220340499760


https://zzsza.github.io/development/2018/04/17/docker-kubernetes/





https://ooeunz.tistory.com/69?category=821628



-----------------------------------------------------------------

client - node_modules - react-scripts > config > webpackdevserver.config.js
에서 public을 수정

    public: "0.0.0.0:3000",
    // public: "localhost:3000",
    // public: allowedHost,